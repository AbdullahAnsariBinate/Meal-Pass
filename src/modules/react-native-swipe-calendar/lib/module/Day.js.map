{"version":3,"sources":["Day.tsx"],"names":["React","useCallback","useMemo","useRef","StyleSheet","Text","TouchableOpacity","View","addDays","format","isSameDay","useCalendarContext","DayLabel","DayWrapper","memo","date","isInDisplayedMonth","dateFormatted","dateRef","memoDate","current","selectedDate","onDateSelect","DayComponent","theme","isSelected","isToday","Date","onDateSelectRef","onDateSelectCb","options","DayItem","dayText","deselectedColor","dayFontColor","dayInactiveFontColor","color","daySelectedFontColor","padding","flex","justifyContent","alignItems","flexDirection","aspectRatio","position","top","bottom","backgroundColor","selectedDayBackgroundColor","borderRadius","fontSize","dayFontSize","fontFamily","dayFontFamily","width","height","todayIndicatorDotColor","DayPage","index","referenceDate","HeaderComponent","dayOffset","firstDayOfMonth","setDate","dayDateFormatted","headerText","headerDateFormat","headerFontSize","headerFontFamily","headerFontColor","textTransform","headerTextTransform","styles","row","create"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef } from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport { addDays, format, isSameDay } from \"date-fns\";\nimport { DayProps, DayWrapperProps, OnDateSelect } from \"./types\";\nimport { useCalendarContext } from \"./context\";\nimport { DayLabel } from \"./DayLabels\";\n\n// The calendar renders a lot of Days, so we wrap them in order to\n// prevent context updates from re-rendering everything\n\nexport const DayWrapper = React.memo(\n  ({ date, isInDisplayedMonth, dateFormatted }: DayWrapperProps) => {\n    const dateRef = useRef(date);\n    const memoDate = useMemo(() => {\n      if (isSameDay(dateRef.current, date)) {\n        return dateRef.current;\n      } else {\n        dateRef.current = date;\n        return date;\n      }\n    }, [date]);\n\n    const { selectedDate, onDateSelect, DayComponent, theme } =\n      useCalendarContext();\n    const isSelected = useMemo(() => {\n      return !!selectedDate && isSameDay(memoDate, selectedDate);\n    }, [memoDate, selectedDate]);\n    const isToday = useMemo(() => isSameDay(memoDate, new Date()), [memoDate]);\n    const onDateSelectRef = useRef(onDateSelect);\n    onDateSelectRef.current = onDateSelect;\n    const onDateSelectCb: OnDateSelect = useCallback((date, options) => {\n      return onDateSelectRef.current?.(date, options);\n    }, []);\n\n    return (\n      <DayItem\n        date={memoDate}\n        dateFormatted={dateFormatted}\n        isSelected={isSelected}\n        isToday={isToday}\n        isInDisplayedMonth={isInDisplayedMonth}\n        DayComponent={DayComponent}\n        onDateSelect={onDateSelectCb}\n        theme={theme}\n      />\n    );\n  }\n);\n\nexport const DayItem = React.memo(\n  ({\n    date,\n    isInDisplayedMonth,\n    isSelected,\n    DayComponent,\n    isToday,\n    onDateSelect,\n    theme,\n    dateFormatted,\n  }: DayProps) => {\n    const dayText = format(date, \"d\");\n    const deselectedColor = isInDisplayedMonth\n      ? theme.dayFontColor\n      : theme.dayInactiveFontColor;\n\n    const color = isSelected ? theme.daySelectedFontColor : deselectedColor;\n\n    if (DayComponent) {\n      return (\n        <DayComponent\n          date={date}\n          isInDisplayedMonth={isInDisplayedMonth}\n          isSelected={isSelected}\n          isToday={isToday}\n        />\n      );\n    }\n\n    const padding = 10;\n\n    return (\n      <TouchableOpacity\n        testID={`react-native-swipe-calendar:${dateFormatted}${\n          isInDisplayedMonth ? \"\" : \":isInDisplayedMonth:false\"\n        }`}\n        onPress={() => onDateSelect?.(date, { isSelected })}\n        style={{\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexDirection: \"row\",\n          padding,\n        }}\n      >\n        <View\n          style={{\n            flex: 0,\n            aspectRatio: 1,\n            position: \"absolute\",\n            top: 0,\n            bottom: 0,\n            backgroundColor: isSelected\n              ? theme.selectedDayBackgroundColor\n              : \"transparent\",\n            borderRadius: 5,\n          }}\n        />\n        <Text\n          style={{\n            color,\n            fontSize: theme.dayFontSize,\n            fontFamily: theme.dayFontFamily,\n          }}\n        >\n          {dayText}\n        </Text>\n        <View\n          style={{\n            position: \"absolute\",\n            width: 5,\n            height: 5,\n            bottom: padding / 2,\n            borderRadius: 5,\n            backgroundColor: isToday\n              ? theme.todayIndicatorDotColor\n              : \"transparent\",\n          }}\n        />\n      </TouchableOpacity>\n    );\n  }\n);\n\nexport const DayPage = React.memo(({ index }: { index: number }) => {\n  const { referenceDate, HeaderComponent, theme } = useCalendarContext();\n\n  const dayOffset = useMemo(\n    () => addDays(referenceDate, index),\n    [referenceDate, index]\n  );\n\n  const firstDayOfMonth = useMemo(() => new Date(dayOffset), [dayOffset]);\n  firstDayOfMonth.setDate(1);\n  const dayDateFormatted = format(dayOffset, \"yyyy-MM-dd\");\n  const headerText = format(dayOffset, theme.headerDateFormat);\n\n  return (\n    <>\n      {HeaderComponent ? (\n        <HeaderComponent startDate={dayOffset} endDate={dayOffset} />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <View style={styles.row}>\n        <DayLabel day={dayOffset} />\n      </View>\n      <View style={styles.row}>\n        <DayWrapper\n          isInDisplayedMonth\n          dateFormatted={dayDateFormatted}\n          date={dayOffset}\n        />\n      </View>\n    </>\n  );\n});\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n  },\n});\n"]}
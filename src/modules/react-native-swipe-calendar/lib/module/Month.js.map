{"version":3,"sources":["Month.tsx"],"names":["addDays","addMonths","eachDayOfInterval","eachWeekOfInterval","format","lastDayOfMonth","React","useMemo","StyleSheet","Text","View","useCalendarContext","DayLabels","Week","MonthPage","memo","index","referenceDate","HeaderComponent","MonthComponent","theme","weekStartsOn","firstDayOfMonth","setDate","lastDayOfMo","headerText","headerDateFormat","weekStarts","start","end","weeks","map","week","alignItems","fontSize","headerFontSize","fontFamily","headerFontFamily","color","headerFontColor","textTransform","headerTextTransform","styles","row","flex","toISOString","create","flexDirection"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  addMonths,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  format,\n  lastDayOfMonth,\n} from \"date-fns\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useCalendarContext } from \"./context\";\nimport { DayLabels } from \"./DayLabels\";\nimport Week from \"./Week\";\n\nexport const MonthPage = React.memo(({ index }: { index: number }) => {\n  const {\n    referenceDate,\n    HeaderComponent,\n    MonthComponent,\n    theme,\n    weekStartsOn,\n  } = useCalendarContext();\n  const firstDayOfMonth = useMemo(\n    () => addMonths(referenceDate, index),\n    [referenceDate, index]\n  );\n  firstDayOfMonth.setDate(1);\n  const lastDayOfMo = useMemo(\n    () => lastDayOfMonth(firstDayOfMonth),\n    [firstDayOfMonth]\n  );\n  const headerText = format(firstDayOfMonth, theme.headerDateFormat);\n  const weekStarts = useMemo(\n    () =>\n      eachWeekOfInterval(\n        {\n          start: firstDayOfMonth,\n          end: lastDayOfMo,\n        },\n        {\n          weekStartsOn,\n        }\n      ),\n    [firstDayOfMonth, lastDayOfMo, weekStartsOn]\n  );\n\n  const weeks = useMemo(\n    () =>\n      weekStarts.map((week) => {\n        return eachDayOfInterval({ start: week, end: addDays(week, 6) });\n      }),\n    [weekStarts]\n  );\n\n  return (\n    <View>\n      {HeaderComponent ? (\n        <HeaderComponent startDate={firstDayOfMonth} endDate={lastDayOfMo} />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <DayLabels daysOfWeek={weeks[0]} />\n      {MonthComponent ? (\n        <MonthComponent weeks={weeks} firstDayOfMonth={firstDayOfMonth} />\n      ) : (\n        <View style={styles.row}>\n          <View style={styles.flex}>\n            {weeks.map((week) => {\n              return (\n                <Week \n                  key={`week-${week[0]?.toISOString()}`}\n                  days={week} \n                  firstDayOfMonth={firstDayOfMonth} \n                 />\n              );\n            })}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  row: { flexDirection: \"row\" },\n});\n"]}
{"version":3,"sources":["Week.tsx"],"names":["addDays","addWeeks","eachDayOfInterval","eachWeekOfInterval","format","isSameMonth","React","useMemo","StyleSheet","Text","View","useCalendarContext","DayWrapper","DayLabels","Week","days","firstDayOfMonth","WeekComponent","styles","weekContainer","map","day","sameMonth","dayDateFormatted","WeekPage","memo","index","referenceDate","HeaderComponent","theme","weekStartsOn","weekOffset","Date","setDate","weekWithStart","start","end","daysOfWeek","headerText","headerDateFormat","length","alignItems","fontSize","headerFontSize","fontFamily","headerFontFamily","color","headerFontColor","textTransform","headerTextTransform","create","flexDirection","justifyContent","row"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  format,\n  isSameMonth,\n} from \"date-fns\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useCalendarContext } from \"./context\";\nimport { DayWrapper } from \"./Day\";\nimport { DayLabels } from \"./DayLabels\";\n\nfunction Week({\n  days,\n  firstDayOfMonth,\n}: {\n  days: Date[];\n  firstDayOfMonth: Date;\n}) {\n  const { WeekComponent } = useCalendarContext();\n\n  return WeekComponent ? (\n    <WeekComponent days={days} />\n  ) : (\n    <View style={styles.weekContainer}>\n      {days.map((day) => {\n        const sameMonth = isSameMonth(day, firstDayOfMonth);\n        const dayDateFormatted = format(day, \"yyyy-MM-dd\");\n        return (\n          <DayWrapper\n            key={dayDateFormatted}\n            isInDisplayedMonth={sameMonth}\n            date={day}\n            dateFormatted={dayDateFormatted}\n          />\n        );\n      })}\n    </View>\n  );\n}\n\nexport default Week;\n\nexport const WeekPage = React.memo(({ index }: { index: number }) => {\n  const { referenceDate, HeaderComponent, theme, weekStartsOn } =\n    useCalendarContext();\n\n  const weekOffset = useMemo(\n    () => addWeeks(referenceDate, index),\n    [referenceDate, index]\n  );\n\n  const firstDayOfMonth = useMemo(\n    () => new Date(addDays(weekOffset, 3)),\n    [weekOffset]\n  );\n\n  firstDayOfMonth.setDate(1);\n\n  const weekWithStart = useMemo(\n    () =>\n      eachWeekOfInterval(\n        {\n          start: weekOffset,\n          end: weekOffset,\n        },\n        {\n          weekStartsOn,\n        }\n      ),\n    [weekOffset, weekStartsOn]\n  );\n\n  const daysOfWeek = useMemo(\n    () =>\n      eachDayOfInterval({\n        start: weekWithStart[0],\n        end: addDays(weekWithStart[0], 6),\n      }),\n    [weekWithStart]\n  );\n\n  const headerText = format(firstDayOfMonth, theme.headerDateFormat);\n\n  return (\n    <>\n      {HeaderComponent ? (\n        <HeaderComponent\n          startDate={daysOfWeek[0]}\n          endDate={daysOfWeek[daysOfWeek.length - 1]}\n        />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <DayLabels daysOfWeek={daysOfWeek} />\n      <Week days={daysOfWeek} firstDayOfMonth={firstDayOfMonth} />\n    </>\n  );\n});\n\nconst styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n"]}
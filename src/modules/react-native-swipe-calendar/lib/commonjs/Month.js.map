{"version":3,"sources":["Month.tsx"],"names":["MonthPage","React","memo","index","referenceDate","HeaderComponent","MonthComponent","theme","weekStartsOn","firstDayOfMonth","setDate","lastDayOfMo","headerText","headerDateFormat","weekStarts","start","end","weeks","map","week","alignItems","fontSize","headerFontSize","fontFamily","headerFontFamily","color","headerFontColor","textTransform","headerTextTransform","styles","row","flex","toISOString","StyleSheet","create","flexDirection"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  addMonths,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  format,\n  lastDayOfMonth,\n} from \"date-fns\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useCalendarContext } from \"./context\";\nimport { DayLabels } from \"./DayLabels\";\nimport Week from \"./Week\";\n\nexport const MonthPage = React.memo(({ index }: { index: number }) => {\n  const {\n    referenceDate,\n    HeaderComponent,\n    MonthComponent,\n    theme,\n    weekStartsOn,\n  } = useCalendarContext();\n  const firstDayOfMonth = useMemo(\n    () => addMonths(referenceDate, index),\n    [referenceDate, index]\n  );\n  firstDayOfMonth.setDate(1);\n  const lastDayOfMo = useMemo(\n    () => lastDayOfMonth(firstDayOfMonth),\n    [firstDayOfMonth]\n  );\n  const headerText = format(firstDayOfMonth, theme.headerDateFormat);\n  const weekStarts = useMemo(\n    () =>\n      eachWeekOfInterval(\n        {\n          start: firstDayOfMonth,\n          end: lastDayOfMo,\n        },\n        {\n          weekStartsOn,\n        }\n      ),\n    [firstDayOfMonth, lastDayOfMo, weekStartsOn]\n  );\n\n  const weeks = useMemo(\n    () =>\n      weekStarts.map((week) => {\n        return eachDayOfInterval({ start: week, end: addDays(week, 6) });\n      }),\n    [weekStarts]\n  );\n\n  return (\n    <View>\n      {HeaderComponent ? (\n        <HeaderComponent startDate={firstDayOfMonth} endDate={lastDayOfMo} />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <DayLabels daysOfWeek={weeks[0]} />\n      {MonthComponent ? (\n        <MonthComponent weeks={weeks} firstDayOfMonth={firstDayOfMonth} />\n      ) : (\n        <View style={styles.row}>\n          <View style={styles.flex}>\n            {weeks.map((week) => {\n              return (\n                <Week \n                  key={`week-${week[0]?.toISOString()}`}\n                  days={week} \n                  firstDayOfMonth={firstDayOfMonth} \n                 />\n              );\n            })}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  row: { flexDirection: \"row\" },\n});\n"]}
{"version":3,"sources":["Week.tsx"],"names":["Week","days","firstDayOfMonth","WeekComponent","styles","weekContainer","map","day","sameMonth","dayDateFormatted","WeekPage","React","memo","index","referenceDate","HeaderComponent","theme","weekStartsOn","weekOffset","Date","setDate","weekWithStart","start","end","daysOfWeek","headerText","headerDateFormat","length","alignItems","fontSize","headerFontSize","fontFamily","headerFontFamily","color","headerFontColor","textTransform","headerTextTransform","StyleSheet","create","flexDirection","justifyContent","row"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  format,\n  isSameMonth,\n} from \"date-fns\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useCalendarContext } from \"./context\";\nimport { DayWrapper } from \"./Day\";\nimport { DayLabels } from \"./DayLabels\";\n\nfunction Week({\n  days,\n  firstDayOfMonth,\n}: {\n  days: Date[];\n  firstDayOfMonth: Date;\n}) {\n  const { WeekComponent } = useCalendarContext();\n\n  return WeekComponent ? (\n    <WeekComponent days={days} />\n  ) : (\n    <View style={styles.weekContainer}>\n      {days.map((day) => {\n        const sameMonth = isSameMonth(day, firstDayOfMonth);\n        const dayDateFormatted = format(day, \"yyyy-MM-dd\");\n        return (\n          <DayWrapper\n            key={dayDateFormatted}\n            isInDisplayedMonth={sameMonth}\n            date={day}\n            dateFormatted={dayDateFormatted}\n          />\n        );\n      })}\n    </View>\n  );\n}\n\nexport default Week;\n\nexport const WeekPage = React.memo(({ index }: { index: number }) => {\n  const { referenceDate, HeaderComponent, theme, weekStartsOn } =\n    useCalendarContext();\n\n  const weekOffset = useMemo(\n    () => addWeeks(referenceDate, index),\n    [referenceDate, index]\n  );\n\n  const firstDayOfMonth = useMemo(\n    () => new Date(addDays(weekOffset, 3)),\n    [weekOffset]\n  );\n\n  firstDayOfMonth.setDate(1);\n\n  const weekWithStart = useMemo(\n    () =>\n      eachWeekOfInterval(\n        {\n          start: weekOffset,\n          end: weekOffset,\n        },\n        {\n          weekStartsOn,\n        }\n      ),\n    [weekOffset, weekStartsOn]\n  );\n\n  const daysOfWeek = useMemo(\n    () =>\n      eachDayOfInterval({\n        start: weekWithStart[0],\n        end: addDays(weekWithStart[0], 6),\n      }),\n    [weekWithStart]\n  );\n\n  const headerText = format(firstDayOfMonth, theme.headerDateFormat);\n\n  return (\n    <>\n      {HeaderComponent ? (\n        <HeaderComponent\n          startDate={daysOfWeek[0]}\n          endDate={daysOfWeek[daysOfWeek.length - 1]}\n        />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <DayLabels daysOfWeek={daysOfWeek} />\n      <Week days={daysOfWeek} firstDayOfMonth={firstDayOfMonth} />\n    </>\n  );\n});\n\nconst styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n"]}